# YAML is a really finicky format (e.g. https://www.arp242.net/yaml-config.html)
# use the linter below to check your changes before uploading them to CircleCI:
# http://yaml-online-parser.appspot.com/

# Configuring CircleCI
# https://circleci.com/docs/2.0/configuration-reference/#section=configuration
# https://circleci.com/docs/2.0/optimizations/

version: 2.1

#
# Orbs
#

# https://circleci.com/docs/2.0/orb-intro/
# https://circleci.com/orbs/registry/orb/cypress-io/cypress
# https://circleci.com/orbs/registry/orb/circleci/node
# https://circleci.com/developer/orbs/orb/circleci/slack

orbs:
  cypress: cypress-io/cypress@1.24.0
  node: circleci/node@3.0.0
  slack: circleci/slack@4.0.1

#
# Executors
#

# https://circleci.com/docs/2.0/circleci-images/
# https://circleci.com/docs/2.0/executor-intro/

executors:
  node-executor:
    docker:
      - image: circleci/node:jessie-browsers

#
# Jobs
#

# https://circleci.com/docs/2.0/configuration-reference/#jobs
# https://circleci.com/docs/2.0/caching/
# https://circleci.com/docs/2.0/writing-yaml/
# https://circleci.com/docs/2.0/parallelism-faster-jobs/
# https://circleci.com/docs/2.0/executor-types/

jobs:
  #
  # Node Jobs
  #

  node-install:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - tidytweets-{{ checksum "package-lock.json" }}
            - tidytweets
      - slack/notify:
          event: fail
          template: basic_fail_1
      - run:
          name: npm
          command: |
            node --version
            npm --version
            npm install
      - save_cache:
          key: tidytweets-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  node-test:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - tidytweets-{{ checksum "package-lock.json" }}
            - tidytweets
      - slack/notify:
          event: fail
          template: basic_fail_1
      - run:
          name: npm
          command: |
            node --version
            npm --version
            npm test
      - save_cache:
          key: tidytweets-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  node-build:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - tidytweets-{{ checksum "package-lock.json" }}
            - tidytweets
      - slack/notify:
          event: fail
          template: basic_fail_1
      - run:
          name: npm
          command: |
            npm install
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - build/

  #
  # Legacy Jobs
  #

  unit_tests:
    executor:
      name: node/default
    steps:
      - checkout
      - node/install:
          node-version: "14.17.4"
      - run: npm test

  #
  # Deployment
  #

  deploy:
    machine:
      image: "ubuntu-1604:201903-01"
    steps:
      - run: curl -X POST -d {} ${NETLIFY_WEBHOOK}
      - slack/notify:
          channel: C015KU2TMEJ
          message: Deployment to Netlify successful!
          webhook: ${SLACK_WEBHOOK}

#
# Workflows
#

# https://circleci.com/docs/2.0/configuration-reference/#workflows
# https://circleci.com/docs/2.0/configuration-reference/#using-when-in-workflows
# https://circleci.com/docs/2.0/pipeline-variables/

workflows:
  version: 2

  test:
    when:
      not:
        equal: [main, << pipeline.git.branch >>] # don't execute on master
    jobs:
      - node-install:
          context: slack-secrets

      - node-test:
          context: slack-secrets
          requires:
            - node-install

  test-and-deploy:
    when:
      equal: [main, << pipeline.git.branch >>] # execute only on master
    jobs:
#      - unit_tests
#      - cypress/run:
#          executor:
#            name: cypress/default
#          install-command: npm install
#          name: e2e_tests
#          requires:
#            - unit_tests
#          start: netlify dev
#          wait-on: "http://localhost:8888"

      - node-install:
          context: slack-secrets

      - node-test:
          context: slack-secrets
          requires:
            - node-install

      - node-build:
          context: slack-secrets
          requires:
            - node-test

      - deploy:
          requires:
            - node-build
          type: approval
